!function(){"use strict";angular.module("ml.ol-maps",[])}(),function(){"use strict";function e(){return{restrict:"E",scope:{features:"=",baseMap:"=",zoom:"=",geometry:"=",enableLinks:"=",parentSingleClick:"&singleClick",parentDoubleClick:"&doubleClick"},templateUrl:"/templates/detail-map.html",controller:"MLOlDetailMapController",controllerAs:"ctrl"}}function t(e,t,n){var o=this;o.pointMap={},o.geometries=[],o.hideLinks=!1,void 0!==e.enableLinks&&(o.hideLinks=!e.enableLinks),e.$watch("features",function(t){o.addMapNodes(e.features)}),e.$watch("baseMap",function(t){e.baseMap&&(o.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,n){n.event.map.hasFeatureAtPixel(n.event.pixel)?n.event.map.forEachFeatureAtPixel(n.event.pixel,function(t,n){e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({feature:t})})}):e.$apply(function(){o.mapItemSelected=null})}),e.$on("openlayers.map.dblclick",function(t,a){a.event.map.forEachFeatureAtPixel(a.event.pixel,function(t,a){e.$apply(function(){e.parentDoubleClick&&e.parentDoubleClick({feature:t}),e.enableLinks&&n.search(featureUri).then(function(e){o.addLinkedNodes(e),o.addLinks(e)})})})}),o.toggleHideLinks=function(){o.mapSettings.lineLayer.visible=!o.hideLinks},o.addLinkedNodes=function(e){var t=[],n=0;for(n=0;n<e.nodes.length;n++)e.nodes[n].location&&e.nodes[n].location.latitude&&(t.push({type:"Feature",id:e.nodes[n].id,properties:{name:e.nodes[n].label,id:e.nodes[n].id,uri:e.nodes[n].id},geometry:{type:"Point",coordinates:[e.nodes[n].location.longitude,e.nodes[n].location.latitude]}}),o.pointMap[e.nodes[n].id]=e.nodes[n].location);o.mapSettings.ptLayer.source.geojson.object.features=o.mapSettings.ptLayer.source.geojson.object.features.concat(t)},o.addLinks=function(e){var t=[],n=0,a=null,r=null;for(n=0;n<e.edges.length;n++)r=null,a=null,e.edges[n].from&&e.edges[n].to&&(r=o.pointMap[e.edges[n].from],a=o.pointMap[e.edges[n].to],r&&a&&t.push({type:"Feature",id:e.edges[n].id,properties:{name:e.edges[n].label},geometry:{type:"LineString",coordinates:[[r.longitude,r.latitude],[a.longitude,a.latitude]]}}));o.mapSettings.lineLayer.source.geojson.object.features=o.mapSettings.lineLayer.source.geojson.object.features.concat(t)},o.centerMap=function(){if(o.mapSettings.ptLayer.source.geojson.object.features.length>0){var e=o.mapSettings.ptLayer.source.geojson.object.features[0];o.mapSettings.center.lon=e.geometry.coordinates[0],o.mapSettings.center.lat=e.geometry.coordinates[1]}},o.addMapNodes=function(e){var t=[],n=0,a=null;if(e&&Array.isArray(e))for(n=0;n<e.length;n++)e[n].geometry&&(a=e[n],null!==a.properties.id&&(a.properties.id="feature1"),t.push(a));o.mapSettings.ptLayer.source.geojson.object.features=t.concat(o.geometries),o.centerMap()},o.addGeometries=function(e){var t=[],n=0;if(Array.isArray(e)&&e.length>0)if(Array.isArray(e[0]))for(n=0;n<e.length;n++)Array.isArray(e[n])?t.push({type:"Feature",id:"geo"+n,properties:{id:"geo"+n},geometry:{type:"Point",coordinates:e[n]}}):console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]");else 2!==e.length||isNaN(e[0])||isNaN(e[1])?console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]"):t.push({type:"Feature",id:"geo1",properties:{id:"geo1"},geometry:{type:"Point",coordinates:e}});else console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]");o.geometries=t,o.mapSettings.ptLayer.source.geojson.object.features=o.mapSettings.ptLayer.source.geojson.object.features.concat(o.geometries),o.centerMap()},o.loadInitialData=function(){o.addMapNodes(e.features),e.geometry&&o.addGeometries(e.geometry)},o.resetData=function(){o.mapSettings.ptLayer.source.geojson.object.features=[],o.mapSettings.lineLayer.source.geojson.object.features=[],o.addMapNodes(e.features),e.geometry&&o.addGeometries(e.geometry)};var a={name:"lineLayer",style:t.createLineStyle,source:{type:"GeoJSON",geojson:{projection:"EPSG:4326",object:{type:"FeatureCollection",features:[]}}}},r=t.buildMapSettings();r.ptLayer.style=t.createPointStyle,r.lineLayer=e.lineLayer?e.lineLayer:a,r.center.zoom=e.zoom?e.zoom:4,e.baseMap&&(r.baseMap=e.baseMap),e.pointLayer&&(r.ptLayer=e.pointLayer),o.mapSettings=r,o.loadInitialData()}angular.module("ml.ol-maps").directive("mlOlDetailMap",e).controller("MLOlDetailMapController",t),t.$inject=["$scope","mlOlHelper","mapLinksService"]}(),function(){"use strict";function e(){var e="/v1/resources/map-links";this.setApi=function(t){e=t},this.$get=function(t){function n(n){return t.get(e+"?rs:subject="+encodeURIComponent(n)).then(function(e){return e.data})}function o(n){return t.get(e+"?rs:expand=true&rs:subject="+encodeURIComponent(n)).then(function(e){return e.data})}var a={search:n,expand:o};return a}}angular.module("ml.ol-maps").provider("mapLinksService",e),e.$inject=[]}(),function(){"use strict";function e(){var e=["#f70010","#e8790b","#2433d8","#bb0be8","#17e804"],t=function(e,t){var n="#f70010";return t&&(n=t),new ol.style.Text({textAlign:"center",textBaseline:"top",font:"12px Arial",text:e,fill:new ol.style.Fill({color:n}),stroke:new ol.style.Stroke({color:"white",width:3}),offsetX:0,offsetY:4,rotation:0})},n=function(e){return new ol.style.Text({textAlign:"center",textBaseline:"middle",font:"14px Arial",text:e,fill:new ol.style.Fill({color:"black"}),offsetX:0,offsetY:0,rotation:0})},o=function(e,n){var o=e.getGeometry(),a=[new ol.style.Style({stroke:new ol.style.Stroke({color:"black",width:3}),text:t(e.get("name"),"black")})];return o.forEachSegment(function(e,t){var n=t[0]-e[0],o=t[1]-e[1],r=Math.atan2(o,n);a.push(new ol.style.Style({geometry:new ol.geom.Point(t),image:new ol.style.Icon({src:"images/arrow-black.png",anchor:[1.5,.5],rotateWithView:!1,rotation:-r})}))}),a},a=function(e,n){var o=6;return new ol.style.Style({image:new ol.style.Circle({radius:o,fill:new ol.style.Fill({color:"red"}),stroke:new ol.style.Stroke({color:"black",width:1})}),text:t(e.get("name"))})},r=function(o,a){var r=10,l=0,i=0,s=2,c=[5],p=0;return o.get("count")&&(l=o.get("count"),i=l.toString().length,r=10+(i>1?5*(i-1):0)),o.get("layer")&&(p=o.get("layer")%5),1===l&&(r=5,s=1,c=[]),new ol.style.Style({image:new ol.style.Circle({radius:r,fill:new ol.style.Fill({color:e[p]}),stroke:new ol.style.Stroke({color:"black",width:s,lineDash:c})}),text:l>1?n(""+l):t("")})},l=function(e){var t={},n=e.event.map.getSize(),o=e.event.map.getView().calculateExtent(n);for(o=ol.proj.transformExtent(o,"EPSG:3857","EPSG:4326"),t.west=o[0],t.south=o[1],t.east=o[2],t.north=o[3];t.west<-180;)t.west=t.west+360;for(;t.east>180;)t.east=t.east-360;return t},i=function(){var e={center:{lat:0,lon:0,zoom:5},defaults:{interactions:{mouseWheelZoom:!0,doubleClickZoom:!1},controls:{zoom:!0,rotate:!1,attribution:!1},events:{map:["singleclick","dblclick","moveend"]}},baseMap:{name:"OpenStreetMap",source:{type:"OSM"}},mousePosition:{projection:"EPSG:4326",coordinateFormat:ol.coordinate.createStringXY(4)},ptLayer:{name:"ptLayer",source:{type:"GeoJSON",geojson:{projection:"EPSG:4326",object:{type:"FeatureCollection",features:[]}}}}};return e};return{createTextStyle:t,createPointStyle:a,createClusterPointStyle:r,createClusterTextStyle:n,createLineStyle:o,convertExtent:l,buildMapSettings:i}}angular.module("ml.ol-maps").factory("mlOlHelper",e),e.$inject=[]}(),function(){"use strict";function e(){return{restrict:"E",scope:{baseMap:"=",zoom:"=",facets:"=",center:"=",parentSingleClick:"&singleClick",parentBoundsChanged:"&boundsChanged"},templateUrl:"/templates/search-map.html",controller:"MLOlSearchFacetsMapController",controllerAs:"ctrl"}}function t(e,t){var n=this;n.pointMap={},n.mapSettings={},e.$watch("facets",function(t){n.processFacets(e.facets)}),e.$watch("baseMap",function(t){e.baseMap&&(n.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,n){n.event.map.forEachFeatureAtPixel(n.event.pixel,function(t,n){var o=t.get("uri");e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({featureUri:o})})})}),e.$on("openlayers.map.moveend",function(n,o){var a=t.convertExtent(o);e.$apply(function(){e.parentBoundsChanged&&e.parentBoundsChanged({bounds:a})})}),n.createMapNode=function(e,t,n){var o=(e.w+e.e)/2,a=(e.s+e.n)/2;return{type:"Feature",id:"feature"+t+n,properties:{name:""+e.count,id:"feature"+t+n,uri:e.uri,count:e.count,layer:n},geometry:{type:"Point",coordinates:[o,a]}}},n.processFacets=function(e){var t,o,a,r=[],l=0,i=0;if(n.createMapNode){for(t in e)if(o=e[t],o&&o.boxes){for(i=0;i<o.boxes.length;i++)a=o.boxes[i],r.push(n.createMapNode(a,i,l));++l}n.mapSettings.ptLayer.source.geojson.object.features=r}};var o=t.buildMapSettings();o.ptLayer.style=t.createClusterPointStyle,e.zoom&&(o.center.zoom=e.zoom),e.center&&(o.center.lat=e.center.lat,o.center.lon=e.center.lon),e.baseMap&&(o.baseMap=e.baseMap),e.pointLayer&&(o.ptLayer=e.pointLayer),n.mapSettings=o,n.processFacets(e.facets)}angular.module("ml.ol-maps").directive("mlOlSearchFacetsMap",e).controller("MLOlSearchFacetsMapController",t),t.$inject=["$scope","mlOlHelper"]}(),function(){"use strict";function e(){return{restrict:"E",scope:{features:"=",baseMap:"=",zoom:"=",center:"=",parentSingleClick:"&singleClick",parentBoundsChanged:"&boundsChanged"},templateUrl:"/templates/search-map.html",controller:"MLOlSearchFeatureMapController",controllerAs:"ctrl"}}function t(e,t){var n=this;n.geometries=[],n.mapSettings={},n.pointMap={},e.$watch("features",function(t){n.addMapNodes(e.features)}),e.$watch("baseMap",function(t){e.baseMap&&(n.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,n){n.event.map.forEachFeatureAtPixel(n.event.pixel,function(t,n){var o=t.get("uri");e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({featureUri:o})})})}),e.$on("openlayers.map.moveend",function(n,o){var a=t.convertExtent(o);e.$apply(function(){e.parentBoundsChanged&&e.parentBoundsChanged({bounds:a})})}),n.addMapNodes=function(e){var t=[],o=0,a=null;if(e&&Array.isArray(e))for(o=0;o<e.length;o++)e[o].geometry&&(a=e[o],null!==a.properties.id&&(a.properties.id="feature1"),t.push(a));n.mapSettings.ptLayer.source.geojson.object.features=t.concat(n.geometries)};var o=t.buildMapSettings();o.ptLayer.style=t.createPointStyle,e.zoom&&(o.center.zoom=e.zoom),e.center&&(o.center.lat=e.center.lat,o.center.lon=e.center.lon),e.baseMap&&(o.baseMap=e.baseMap),e.pointLayer&&(o.ptLayer=e.pointLayer),n.mapSettings=o,n.addMapNodes(e.features)}angular.module("ml.ol-maps").directive("mlOlSearchFeatureMap",e).controller("MLOlSearchFeatureMapController",t),t.$inject=["$scope","mlOlHelper"]}();