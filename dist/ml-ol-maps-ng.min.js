!function(){"use strict";angular.module("ml.ol-maps",[])}(),function(){"use strict";function e(){return{restrict:"E",scope:{features:"=",baseMap:"=",zoom:"=",geometry:"=",enableLinks:"=",parentSingleClick:"&singleClick"},templateUrl:"/templates/detail-map.html",controller:"MLOlDetailMapController",controllerAs:"ctrl"}}function t(e,t,o){var n=this;n.pointMap={},n.geometries=[],n.hideLinks=!1,void 0!==e.enableLinks&&(n.hideLinks=!e.enableLinks),e.$watch("features",function(t){n.addMapNodes(e.features)}),e.$watch("baseMap",function(t){e.baseMap&&(n.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,a){a.event.map.forEachFeatureAtPixel(a.event.pixel,function(t,a){var r=t.get("uri");e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({featureUri:r}),e.enableLinks&&o.search(r).then(function(e){n.addLinkedNodes(e),n.addLinks(e)})})})}),n.toggleHideLinks=function(){n.mapSettings.lineLayer.visible=!n.hideLinks},n.addLinkedNodes=function(e){var t=[],o=0;for(o=0;o<e.nodes.length;o++)e.nodes[o].location&&e.nodes[o].location.latitude&&(t.push({type:"Feature",id:e.nodes[o].id,properties:{name:e.nodes[o].label,id:e.nodes[o].id,uri:e.nodes[o].id},geometry:{type:"Point",coordinates:[e.nodes[o].location.longitude,e.nodes[o].location.latitude]}}),n.pointMap[e.nodes[o].id]=e.nodes[o].location);n.mapSettings.ptLayer.source.geojson.object.features=n.mapSettings.ptLayer.source.geojson.object.features.concat(t)},n.addLinks=function(e){var t=[],o=0,a=null,r=null;for(o=0;o<e.edges.length;o++)r=null,a=null,e.edges[o].from&&e.edges[o].to&&(r=n.pointMap[e.edges[o].from],a=n.pointMap[e.edges[o].to],r&&a&&t.push({type:"Feature",id:e.edges[o].id,properties:{name:e.edges[o].label},geometry:{type:"LineString",coordinates:[[r.longitude,r.latitude],[a.longitude,a.latitude]]}}));n.mapSettings.lineLayer.source.geojson.object.features=n.mapSettings.lineLayer.source.geojson.object.features.concat(t)},n.centerMap=function(){if(n.mapSettings.ptLayer.source.geojson.object.features.length>0){var e=n.mapSettings.ptLayer.source.geojson.object.features[0];n.mapSettings.center.lon=e.geometry.coordinates[0],n.mapSettings.center.lat=e.geometry.coordinates[1]}},n.addMapNodes=function(e){var t=[],o=0,a=null;if(e&&Array.isArray(e))for(o=0;o<e.length;o++)e[o].geometry&&(a=e[o],null!==a.properties.id&&(a.properties.id="feature1"),t.push(a));n.mapSettings.ptLayer.source.geojson.object.features=t.concat(n.geometries),n.centerMap()},n.addGeometries=function(e){var t=[],o=0;if(Array.isArray(e)&&e.length>0)if(Array.isArray(e[0]))for(o=0;o<e.length;o++)Array.isArray(e[o])?t.push({type:"Feature",id:"geo"+o,properties:{id:"geo"+o},geometry:{type:"Point",coordinates:e[o]}}):console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]");else 2!==e.length||isNaN(e[0])||isNaN(e[1])?console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]"):t.push({type:"Feature",id:"geo1",properties:{id:"geo1"},geometry:{type:"Point",coordinates:e}});else console.log("Unrecognized geometry format: ",e,"  Expected format is [lng, lat] or [[lng, lat], [lng, lat]]");n.geometries=t,n.mapSettings.ptLayer.source.geojson.object.features=n.mapSettings.ptLayer.source.geojson.object.features.concat(n.geometries),n.centerMap()},n.loadInitialData=function(){n.addMapNodes(e.features),e.geometry&&n.addGeometries(e.geometry)},n.resetData=function(){n.mapSettings.ptLayer.source.geojson.object.features=[],n.mapSettings.lineLayer.source.geojson.object.features=[],n.addMapNodes(e.features),e.geometry&&n.addGeometries(e.geometry)};var a={name:"lineLayer",style:t.createLineStyle,source:{type:"GeoJSON",geojson:{projection:"EPSG:4326",object:{type:"FeatureCollection",features:[]}}}},r=t.buildMapSettings();r.ptLayer.style=t.createPointStyle,r.lineLayer=e.lineLayer?e.lineLayer:a,r.center.zoom=e.zoom?e.zoom:4,e.baseMap&&(r.baseMap=e.baseMap),e.pointLayer&&(r.ptLayer=e.pointLayer),n.mapSettings=r,n.loadInitialData()}angular.module("ml.ol-maps").directive("mlOlDetailMap",e).controller("MLOlDetailMapController",t),t.$inject=["$scope","mlOlHelper","mapLinksService"]}(),function(){"use strict";function e(){var e="/v1/resources/map-links";this.setApi=function(t){e=t},this.$get=function(t){function o(o){return t.get(e+"?rs:subject="+encodeURIComponent(o)).then(function(e){return e.data})}function n(o){return t.get(e+"?rs:expand=true&rs:subject="+encodeURIComponent(o)).then(function(e){return e.data})}var a={search:o,expand:n};return a}}angular.module("ml.ol-maps").provider("mapLinksService",e),e.$inject=[]}(),function(){"use strict";function e(){var e=["#f70010","#e8790b","#2433d8","#bb0be8","#17e804"],t=function(e,t){var o="#f70010";return t&&(o=t),new ol.style.Text({textAlign:"center",textBaseline:"top",font:"12px Arial",text:e,fill:new ol.style.Fill({color:o}),stroke:new ol.style.Stroke({color:"white",width:3}),offsetX:0,offsetY:4,rotation:0})},o=function(e){return new ol.style.Text({textAlign:"center",textBaseline:"middle",font:"14px Arial",text:e,fill:new ol.style.Fill({color:"black"}),offsetX:0,offsetY:0,rotation:0})},n=function(e,o){var n=[new ol.style.Style({stroke:new ol.style.Stroke({color:"black",width:3}),text:t(e.get("name"),"black")})];return n},a=function(e,o){var n=6;return new ol.style.Style({image:new ol.style.Circle({radius:n,fill:new ol.style.Fill({color:"red"}),stroke:new ol.style.Stroke({color:"black",width:1})}),text:t(e.get("name"))})},r=function(n,a){var r=10,i=0,l=0,s=2,c=[5],p=0;return n.get("count")&&(i=n.get("count"),l=i.toString().length,r=10+(l>1?5*(l-1):0)),n.get("layer")&&(p=n.get("layer")%5),1===i&&(r=5,s=1,c=[]),new ol.style.Style({image:new ol.style.Circle({radius:r,fill:new ol.style.Fill({color:e[p]}),stroke:new ol.style.Stroke({color:"black",width:s,lineDash:c})}),text:i>1?o(""+i):t("")})},i=function(e){var t={},o=e.event.map.getSize(),n=e.event.map.getView().calculateExtent(o);for(n=ol.proj.transformExtent(n,"EPSG:3857","EPSG:4326"),t.west=n[0],t.south=n[1],t.east=n[2],t.north=n[3];t.west<-180;)t.west=t.west+360;for(;t.east>180;)t.east=t.east-360;return t},l=function(){var e={center:{lat:0,lon:0,zoom:5},defaults:{interactions:{mouseWheelZoom:!0},controls:{zoom:!0,rotate:!1,attribution:!1},events:{map:["singleclick","moveend"]}},baseMap:{name:"OpenStreetMap",source:{type:"OSM"}},mousePosition:{projection:"EPSG:4326",coordinateFormat:ol.coordinate.createStringXY(4)},ptLayer:{name:"ptLayer",source:{type:"GeoJSON",geojson:{projection:"EPSG:4326",object:{type:"FeatureCollection",features:[]}}}}};return e};return{createTextStyle:t,createPointStyle:a,createClusterPointStyle:r,createClusterTextStyle:o,createLineStyle:n,convertExtent:i,buildMapSettings:l}}angular.module("ml.ol-maps").factory("mlOlHelper",e),e.$inject=[]}(),function(){"use strict";function e(){return{restrict:"E",scope:{baseMap:"=",zoom:"=",facets:"=",parentSingleClick:"&singleClick",parentBoundsChanged:"&boundsChanged"},templateUrl:"/templates/search-map.html",controller:"MLOlSearchFacetsMapController",controllerAs:"ctrl"}}function t(e,t){var o=this;o.pointMap={},o.mapSettings={},e.$watch("facets",function(t){o.processFacets(e.facets)}),e.$watch("baseMap",function(t){e.baseMap&&(o.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,o){o.event.map.forEachFeatureAtPixel(o.event.pixel,function(t,o){var n=t.get("uri");e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({featureUri:n})})})}),e.$on("openlayers.map.moveend",function(o,n){var a=t.convertExtent(n);e.$apply(function(){e.parentBoundsChanged&&e.parentBoundsChanged({bounds:a})})}),o.createMapNode=function(e,t,o){var n=(e.w+e.e)/2,a=(e.s+e.n)/2;return{type:"Feature",id:"feature"+t+o,properties:{name:""+e.count,id:"feature"+t+o,uri:e.uri,count:e.count,layer:o},geometry:{type:"Point",coordinates:[n,a]}}},o.processFacets=function(e){var t,n,a,r=[],i=0,l=0;if(o.createMapNode){for(t in e)if(n=e[t],n&&n.boxes){for(l=0;l<n.boxes.length;l++)a=n.boxes[l],r.push(o.createMapNode(a,l,i));++i}o.mapSettings.ptLayer.source.geojson.object.features=r}};var n=t.buildMapSettings();n.ptLayer.style=t.createClusterPointStyle,e.zoom&&(n.center.zoom=e.zoom),e.baseMap&&(n.baseMap=e.baseMap),e.pointLayer&&(n.ptLayer=e.pointLayer),o.mapSettings=n,o.processFacets(e.facets)}angular.module("ml.ol-maps").directive("mlOlSearchFacetsMap",e).controller("MLOlSearchFacetsMapController",t),t.$inject=["$scope","mlOlHelper"]}(),function(){"use strict";function e(){return{restrict:"E",scope:{features:"=",baseMap:"=",zoom:"=",parentSingleClick:"&singleClick",parentBoundsChanged:"&boundsChanged"},templateUrl:"/templates/search-map.html",controller:"MLOlSearchFeatureMapController",controllerAs:"ctrl"}}function t(e,t){var o=this;o.geometries=[],o.mapSettings={},o.pointMap={},e.$watch("features",function(t){o.addMapNodes(e.features)}),e.$watch("baseMap",function(t){e.baseMap&&(o.mapSettings.baseMap=e.baseMap)}),e.$on("openlayers.map.singleclick",function(t,o){o.event.map.forEachFeatureAtPixel(o.event.pixel,function(t,o){var n=t.get("uri");e.$apply(function(){e.parentSingleClick&&e.parentSingleClick({featureUri:n})})})}),e.$on("openlayers.map.moveend",function(o,n){var a=t.convertExtent(n);e.$apply(function(){e.parentBoundsChanged&&e.parentBoundsChanged({bounds:a})})}),o.addMapNodes=function(e){var t=[],n=0,a=null;if(e&&Array.isArray(e))for(n=0;n<e.length;n++)e[n].geometry&&(a=e[n],null!==a.properties.id&&(a.properties.id="feature1"),t.push(a));o.mapSettings.ptLayer.source.geojson.object.features=t.concat(o.geometries)};var n=t.buildMapSettings();n.ptLayer.style=t.createPointStyle,e.zoom&&(n.center.zoom=e.zoom),e.baseMap&&(n.baseMap=e.baseMap),e.pointLayer&&(n.ptLayer=e.pointLayer),o.mapSettings=n,o.addMapNodes(e.features)}angular.module("ml.ol-maps").directive("mlOlSearchFeatureMap",e).controller("MLOlSearchFeatureMapController",t),t.$inject=["$scope","mlOlHelper"]}();